
pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/KunalGKNY/Docker-Multibranch.git'
        CREDENTIALS_ID = '3ed9844a-5ef1-4a41-b039-5db654cd6252'  // Replace with real Jenkins credentials ID
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: "${env.BRANCH_NAME}", credentialsId: "${env.CREDENTIALS_ID}", url: "${env.REPO_URL}"
            }
        }

        stage('Build and Deploy Container') {
            steps {
                script {
                    def branch = env.BRANCH_NAME
                    def containerName = ""
                    def hostPort = ""

                    if (branch == "2025Q1") {
                        containerName = "c1"
                        hostPort = "80"
                    } else if (branch == "2025Q2") {
                        containerName = "c2"
                        hostPort = "90"
                    } else if (branch == "2025Q3") {
                        containerName = "c3"
                        hostPort = "8080"
                    } else {
                        error("Branch ${branch} not handled.")
                    }

                    // Cleanup any existing container
                    sh "docker rm -f ${containerName} || true"

                    // Prepare content and deploy new container
                    sh """
                        mkdir -p /tmp/webcontent
                        cp index.html /tmp/webcontent/
                        docker run -d \
                            --name ${containerName} \
                            -p ${hostPort}:80 \
                            -v /tmp/webcontent:/usr/local/apache2/htdocs/ \
                            httpd
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment completed successfully."
        }
        failure {
            echo "❌ Deployment failed. Please check logs."
        }
        always {
            echo "ℹ️ Pipeline execution finished."
        }
    }
}
